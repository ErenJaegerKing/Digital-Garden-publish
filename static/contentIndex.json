{"index":{"slug":"index","filePath":"index.md","title":"🪴常青藤","links":["todo","常用代码小记","工作记录","life/个人介绍","life/健康生活的个人实践","misc/独立游戏开发","tech/需求设计","tech/表结构设计规范","tech/Docker部署技术栈环境","tech/Kafka学习","tech/技术认知","life/🍳做饭指南","life/测试显示屏","倒数日"],"tags":[],"content":"\n把握当下，认真、严谨、不骄、不躁。todo\n\n💼工作专用区\n\n常用代码小记\n工作记录\n\n📋近期任务\n\n个人介绍\n健康生活的个人实践 肌肉健身 + 腹肌运动 + HIFI + 睡觉\n技术广度与深度的探索 - 复盘（专注于有用的，时间浪费在哪里?提高效率）  每日打卡\n第二语言\n阅读\n独立游戏开发\n\n📖近期技术文章\n\n需求设计\n表结构设计规范\nDocker部署技术栈环境\nKafka学习\n技术认知\n\n🏠近期生活文章\n\n🍳做饭指南\n测试显示屏\n\n🧭记录\n\n图标emojipedia.org/ 可以直接问AI去要的？哈哈哈哈\n倒数日\n\n📔近期书籍（专注于一本书籍）\n\n认知觉醒\n被讨厌的勇气\n\n🎥近期电影\n\n罗小黑战记2\n聊斋：兰若寺 25/7/12 我们国家动画技术水平越来越高了，我很开心就是以后会见到更多高质量的电影。而且我是热衷于技术的人，这种在全世界都顶尖的水平，一定付出难以想象的努力。如果自己也能依靠自己的能力创造出顶级水平的作品，那么我想，我不白来啊。\n恶意 - 很有现代教育意义 25/7/9\n侏罗纪世界 重生 -还行 25/7/8\n\n💖喜欢的古诗\n\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生（定风波 - 苏轼 ）\n\n🎶喜欢的人（排名不分先后）\n\n米津玄师\n周杰伦\n胡歌\n\n💡喜欢的名言\n\n“人一辈子做对两件事就可以很富有：寻找什么是有效的，重复它；发现什么是无效的，避免它。我们不需要新的思想，我们只需要正确的重复。” ——— 查理芒格\n"},"life/index":{"slug":"life/index","filePath":"life/index.md","title":" 🌿生活","links":[],"tags":[],"content":"时间在羊毛毯上，打了个温柔的盹。"},"life/个人介绍":{"slug":"life/个人介绍","filePath":"life/个人介绍.md","title":"个人介绍","links":[],"tags":[],"content":"\n02/INFJ/十二月/摩羯座\n爱好：看电影、打游戏、听音乐\n"},"life/健康生活的个人实践":{"slug":"life/健康生活的个人实践","filePath":"life/健康生活的个人实践.md","title":"健康生活的个人实践","links":[],"tags":[],"content":"正式动工\n肌肉训练：一对哑铃练完全身，哑铃居家全身分化训练计划，哑铃全身训练合集_哔哩哔哩_bilibili\n腹肌训练：腹肌撕裂者9分钟跟练，每天3组。_哔哩哔哩_bilibili\n将动作做标准\n个人实践\n50%有氧运动走路7000步（Keep每天记录）+ 25%每天剧烈运动HITI12分钟 + 25%力量训练训练完组数。世卫组织成年人每周应该进行至少150-300分钟的中强度有氧活动；或至少75-150分钟的剧烈强度有氧活动；组合活动可以获得巨大的健康收益。额外的健康福利，每星期至少2天中等或者更高强度的肌肉强化活动，涉及所有主要肌群。\n最佳实践，成年人可以将每周中等强度有氧活动增加到300分钟以上；或进行150分钟以上的剧烈强度有氧活动；6天运动，1天休息，时间分配，75min剧烈运动 + 150有氧运动 + 二分化肌肉训练2次 + 三分化肌肉训练2次。\n具体时间为12HITI每天，24跑步每天（早上跑步 + 晚上跑步）要达到中等强度的有氧训练 + 二分化肌肉训练2次=4次，训练一组。\n思想来源\n\n程序员延寿指南HowToLiveLonger/README.md at main · geekan/HowToLiveLonger\n健康学习到150岁 - 人体系统调优不完全指南zijie0/HumanSystemOptimization: 健康学习到150岁 - 人体系统调优不完全指南\n新手版 MuscleWiki 中文健身网\n进阶版 MuscleWiki - Simplify your workout\n"},"life/测试显示屏":{"slug":"life/测试显示屏","filePath":"life/测试显示屏.md","title":"测试显示屏","links":[],"tags":[],"content":""},"life/🍳做饭指南":{"slug":"life/🍳做饭指南","filePath":"life/🍳做饭指南.md","title":"🍳做饭指南","links":[],"tags":[],"content":"以后再说吧，近两年没空，但是一定会学的，25/7/12\n\nHow To Cook\n食用手册\n"},"misc/index":{"slug":"misc/index","filePath":"misc/index.md","title":"🧶杂物","links":[],"tags":[],"content":"所有沉默的尘埃，开始轻轻歌唱。"},"misc/独立游戏开发":{"slug":"misc/独立游戏开发","filePath":"misc/独立游戏开发.md","title":"独立游戏开发","links":[],"tags":[],"content":"像素画\n\n资源\n\nGodot主题：github.com/passivestar/godot-minimal-theme\n文字主题：jetbrains mono\n游戏设计模式 Game Programming Patterns\n独立游戏开发的资源导航站：game.indiehubs.org\nFIRE(经济独立，提前退休)资源导航站：fire.indiehubs.org\n源代码反编译器GDRETools/gdsdecomp: Godot reverse engineering tools\n独立开发初学者指南A Beginner’s Guide to Indie Development : r/gamedev\nGameJamldjam.com | Ludum Dare game jam\nGameJamGame jams - itch.io\n书籍阅读 ：游戏设计艺术 体验引擎 游戏机制\n"},"tech/Docker部署技术栈环境":{"slug":"tech/Docker部署技术栈环境","filePath":"tech/Docker部署技术栈环境.md","title":"Docker部署技术栈环境","links":[],"tags":[],"content":"\n一点一点的积累，不要一口气吃一个大胖子\n\ndocker network create my-network\n \ndocker run -d \\\n  --name mysql \\\n  --restart always \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  -p 13306:3306 \\\n  -v ./mysql/sql:/docker-entrypoint-initdb.d \\\n  --health-cmd &quot;mysqladmin ping -h localhost&quot; \\\n  --health-interval 5s \\\n  --health-timeout 10s \\\n  --health-retries 10 \\\n  --health-start-period 15s \\\n  --network my-network \\\n  mysql:8.0.32 \\\n  --default-authentication-plugin=mysql_native_password\n1、安装docker\nyum install &lt;download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm&gt;\nyum install -y yum-utils device-mapper-persistent-data lvm2\nyum-config-manager --add-repo &lt;download.docker.com/linux/centos/docker-ce.repo&gt;\nyum install -y docker-ce\ncurl -L &quot;&lt;github.com/docker/compose/releases/download/1.25.0/docker-compose-$&gt;(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n安装docker\nsudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release\ncurl -fsSL &lt;mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg&gt; | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] &lt;mirrors.aliyun.com/docker-ce/linux/ubuntu&gt; $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt update\nsudo apt-get update\nsudo apt install docker-ce docker-ce-cli containerd.io\nsudo apt-get install bash-completion\nsudo curl -L &lt;raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker&gt; -o /etc/bash_completion.d/docker.sh\nsource /etc/bash_completion.d/docker.sh\n \n安装dockr-compose\nsudo curl -L &lt;github.com/docker/compose/releases/download/v2.21.0/docker-compose-`uname&gt; -s`-`uname -m` -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n \n 下载太慢，更换docker-compose镜像源\nsudo curl -L &quot;&lt;get.daocloud.io/docker/compose/releases/download/2.26.0/docker-compose-$&gt;(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n \nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n \n修改docker镜像源\nsudo tee /etc/docker/daemon.json &lt;&lt;-&#039;EOF&#039;\n{\n    &quot;registry-mirrors&quot;: [\n        &quot;&lt;docker.m.daocloud.io&gt;&quot;,\n        &quot;&lt;docker.imgdb.de&gt;&quot;,\n        &quot;&lt;docker-0.unsee.tech&gt;&quot;,\n        &quot;&lt;docker.hlmirror.com&gt;&quot;,\n        &quot;&lt;docker.1ms.run&gt;&quot;,\n        &quot;&lt;func.ink&gt;&quot;,\n        &quot;&lt;lispy.org&gt;&quot;,\n        &quot;&lt;docker.xiaogenban1993.com&gt;&quot;\n    ]\n}\nEOF\n \nsystemctl daemon-reload\nsystemctl restart docker\n \ndocker pull hello-world\n2、检查docker和docker-compose是否安装成功\ndocker version\ndocker-compose --version\n3、文件授权\nchmod +x /usr/local/bin/docker-compose\n4、启动docker\nsystemctl start docker\n5、构建docker服务\ndocker-compose build\n6、启动docker容器\ndocker-compose up -d\n7、启动停止服务容器\n停止全部容器docker-compose down\n启动服务的容器docker-compose up ruoyi-mysql ruoyi-server ruoyi-nginx ruoyi-redis\n停止服务的容器docker-compose stop ruoyi-mysql ruoyi-server ruoyi-nginx ruoyi-redis\n8、Docker Compose常用命令\n基本命令\n1. 启动服务\ndocker-compose up\n后台运行：docker-compose up -d\n强制重建镜像：docker-compose up --build\n只启动特定服务：docker-compose up service1 service2\n2. 停止服务\ndocker-compose down\n同时删除卷：docker-compose down -v\n同时删除镜像：docker-compose down --rmi all\n3. 查看服务状态    \ndocker-compose ps\n4. 查看运行日志\ndocker-compose logs\n查看特定服务日志：docker-compose logs service_name\n实时跟踪日志：docker-compose logs -f\n \n服务管理\n5. 启动/停止/重启服务\ndocker-compose start\ndocker-compose stop\ndocker-compose restart\n6. 暂停/恢复服务\ndocker-compose pause service_name\ndocker-compose unpause service_name\n \n镜像管理\n7. 构建镜像\ndocker-compose build\n强制重建：docker-compose build --no-cache\n只构建特定服务：docker-compose build service_name\n8. 拉取镜像\ndocker-compose pull\n \n实用命令\n9. 执行命令\ndocker-compose exec service_name command\n示例：进入容器bash\ndocker-compose exec web bash\n10. 查看服务端口\ndocker-compose port service_name port_number\n11. 查看服务配置\ndocker-compose config\n验证配置：docker-compose config -q\n12. 缩放服务实例\ndocker-compose scale service_name=num_instances\n \n环境管理\n13. 环境变量文件\n默认使用 .env 文件，或指定：\ndocker-compose --env-file .env.dev up\n14. 使用不同配置文件\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up\n \n常用组合命令\n完全重建并启动服务：docker-compose down &amp;&amp; docker-compose up -d --build\n查看服务资源使用：docker-compose top\n删除所有停止的容器和未使用的镜像：docker-compose down --rmi all -v\n \n部署点歌系统时碰到的相关问题\n1. image是构建时候容器名字和标签 container_name是要启动镜像的名字\n2.docker-compose启动的时候会创建一个默认的网络imusic_default\n3.后端服务启动失败（检查日志发现mysql数据库有问题：docker-compose怎么进入mysql容器中去执行相关的命令）\ndocker-compose exec imusic-mysql mysql -u root -p\ndocker-compose exec imusic-mysql ls -la /docker-entrypoint-initdb.d/ 查看sql语句是否存在容器中\ndocker-compose exec imusic-mysql mysql -u root -p -e &quot;use ry-vue;source /docker-entrypoint-initdb.d/ry.sql;&quot;&quot;加载sql到mysql数据库中\n \n怎么重建docker-compose镜像 \n# 停止服务并删除所有相关资源（包括未使用的镜像和卷）\ndocker-compose down --rmi all -v\ndocker compose down --rmi all -v\n# 完整重建\ndocker-compose up -d --build \ndocker compose up -d --build \ndocker-compose logs -f &gt; compose.log 2&gt;&amp;1 &amp;\n \n后端服务的mysql地址要改成容器名字imusic-mysql，缓存redis要改成imusic-redis，文件存储minio改成imusic-minio\n数据库脚本头部需要添加set names &#039;utf8&#039;;（防止乱码）\n \n查看nginx容器内有没有数据 docker exec -it imusic-nginx sh -c &quot;ls -la /usr/share/nginx/html/&quot;\n \nwindows怎么启动jar包后台以及保存日志？\njavaw -jar your-app.jar &gt; app.log （将标准输出重定向到 app.log 文件。） 2&gt;&amp;1 （将错误输出合并到标准输出（即日志文件）。）\n \nLinux怎么启动jar包后台以及保存日志？\nnohup java -jar your-app.jar &gt; app.log 2&gt;&amp;1 &amp;\nnohup：防止进程因终端关闭而被终止（忽略 SIGHUP 信号）。\n&gt; app.log：将标准输出（stdout）重定向到 app.log 文件。\n2&gt;&amp;1：将标准错误（stderr）合并到标准输出（即日志文件）。\n&amp;：后台运行。\n查看日志\n    tail -f app.log  # 实时查看日志\n    cat app.log      # 查看完整日志\n停止进程\n    查找进程 ID：ps aux | grep &quot;java -jar your-app.jar&quot;\n    终止进程：kill -9 &lt;PID&gt;\n使用 systemd 管理服务（推荐生产环境）\n1.没有重建镜像，启动的还是以前的\n2.将mysql5.4换成8.4的时候，要清空原来的mysql相关配置数据\n3.后端怎么根据后缀启动相关的配置文件\nspring boot profiles 实现多环境下配置切换 docker版 - ejiyuan - 博客园\n一文带你实现SpringBoot多配置文件实现环境动态切换（prod、dev、test）_springboot dev prod-CSDN博客\n4.替换jar包的时候，名字不对，启动了之前未清理的jar包，导致发生错误\n5.前端怎么根据后缀编译相关的dist RuoYi-Vue/vue项目配置env_ruoyi vue 切换开发和正式环境 env-CSDN博客\n6.镜像标签中间全角字符直接报错\n7.在mysql中直接操作的话，需要;结尾\n8.mysql5.4不支持mysql8的语法，Unknown collation: &#039;utf8mb4_0900_ai_ci&#039;\n9.403页面访问的时候，发现nginx容器中没有页面那个目录，复制不进去，挂载数据卷在构建之后，就把空的数据卷挂载到html中，就会把复制进去的文件给覆盖掉（大坑）\n \ncompose常用服务配置参考 docker-compose教程（安装，使用, 快速入门）-CSDN博客\nbuild\n    可以指定包含构建上下文的路径，如果你同时指定image和build，则compose会通过build指定的目录构建容器镜像，而构建的镜像名为image中指定的镜像名和标签。\n    context 包含Dockerfile文件的目录路径，或者是git仓库的URL。\n    dockerfile 备用Docker文件。\n    args 添加构建镜像的参数，环境变量只能在构建过程中访问。 \nimage\n    指定启动容器的镜像，可以是镜像仓库/标签或者镜像id（或者id的前一部分） 。如果镜像不存在，Compose将尝试从官方镜像仓库将其pull下来，如果你还指定了build，在这种情况下，它将使用指定的build选项构建它，并使用image指定的名字和标记对其进行标记。\ncontainer_name\n    指定一个自定义容器名称，而不是生成的默认名称。由于Docker容器名称必须是唯一的，因此如果指定了自定义名称，则无法将服务扩展到多个容器。\nvolumes\n    卷挂载路径设置。\ncommand\n    覆盖容器启动后默认执行的命令。\nlinks\n    链接到另一个服务中的容器。 \nexternal_links\n    链接到docker-compose.yml 外部的容器，甚至并非 Compose 管理的容器。\nexpose\n    暴露端口，但不映射到宿主机，只被连接的服务访问。仅可以指定内部端口为参数\nports\n    暴露端口信息。 常用的简单格式：使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\nrestart\n    no是默认的重启策略，在任何情况下都不会重启容器。 指定为always时，容器总是重新启动。 如果退出代码指示出现故障错误，则on-failure将重新启动容器。\nenvironment\n    添加环境变量。\npid\n    将PID模式设置为主机PID模式。\ndns\n    配置 DNS 服务器。\n    \n \nCompose的使用三步：\n    使用 Dockerfile 自定义应用程序的环境，便于在任何地方复制它；\n    使用 docker-compose.yml 定义构成的应用程序的服务，便于隔离环境中一起运行；\n    运行 docker-compose up 命令启动并运行整个应用程序。\n "},"tech/Kafka学习":{"slug":"tech/Kafka学习","filePath":"tech/Kafka学习.md","title":"Kafka学习","links":[],"tags":[],"content":"【布客】kafka 中文翻译\n入门\n\n事件流是以事件流形式从数据库、传感器、移动设备、云服务和软件应用程序等事件源实时捕获数据的实践。\n可以实时跟踪和监测汽车、物流等，可以持续捕获和分析来自物联网或其他设备的传感器数据。\n三个 关键功能\n\n发布和订阅事件流\n持久可靠地存储事件流\n在事件发生时或回顾性处理事件流\n\n\nKafka是如何工作的？Kafka是一个分布式系统，由通过高性能TCP网络协议进行通信的服务器和客户端组成。它可以部署在本地和云环境中的裸机硬件、虚拟机和容器上。\n主要概念和术语：\n\n生产者是将事件写入到Kafka的客户端应用程序，而消费者是订阅这些事件的客户端应用程序。彼此完全解耦且互不可知，高可扩展性的关键设计元素。\n主题（事件存储并持久化的地方），事件在使用后不会被删除，你可以通过每个主题的配置来定义kafka应保留事件的事件，之后旧事件将被丢弃。不论数据有多大，性能恒定。主题是分区的。\n\n\n\n设计\n\n动机：充当统一平台来处理大公司可能拥有的所有实时数据源。\n\n高吞吐量支持大容量事件流\n妥善处理大量积压数据\n处理低延迟交付\n机器故障时保证容错\n\n\n持久化\n\n创新点\n\n顺序IO可以接近网络速度\n依靠OS缓存比自行管理更高效\n简单追加日志的O(1)操作在磁盘上表现最佳\n\n\n优势：允许长时间保留消息，而传统系统通常在消费后立即删除。为消费者提供更大灵活性（如重新消费、新消费者加入等）。\n\n\n效率（如何实现高效处理数据？）\n\n批量处理（批处理是核心优化）\n零拷贝技术（减少数据复制）\n智能缓存\n压缩传输（省带宽）\n\n\n"},"tech/index":{"slug":"tech/index","filePath":"tech/index.md","title":"💻技术","links":[],"tags":[],"content":"一行代码，便是一个宇宙的呼吸。"},"tech/技术认知":{"slug":"tech/技术认知","filePath":"tech/技术认知.md","title":"技术认知","links":[],"tags":[],"content":"重要的事情\n\n这种核心要做的一件事就是:必须强迫自己每天输出至少一份总结文档，即使公司有了对应的说明，但是他不是自己的内化的知识，坚持一阵，这样才能把公司交付给自己的东西演变成自己的，大部分学生去实习，还是有些外包思维严重的，下班学习高大上的内容，不学习公司的业务和技术。 工作了1-3个月，没有总结和沉淀几份文档，这个是很危险的，所以非常建议这个小伙子，从今天开始，每天都能沉淀内容\n直接说到我的痛点了，我在上一家公司每天下班后就学习高大上的内容。结果后面单独负责一个项目的时候，有的业务都没搞清楚，做的一塌糊涂。后面意识到这种问题，每一周都会输出相关模块的er图结构，业务逻辑流程等。所以刚进入公司的一定要先熟悉公司业务，一定要先熟悉公司业务，一定要先熟悉公司业务。\n\n想法\n1、先不要想着先看代码，而是先把项目的基本业务和基本功能梳理下，先理解业务，形成产出\n2、理解后，在看代码，看代码先看pom.xml，梳理 下这个项目用到了哪些依赖、哪些组件梳理出来，形成产出\n3、在通过数据库客户端导出数据库表结构，对自己感兴趣的业务模块、功能，找到相关界面，先从界面定位出来后端接口和和表，先从自己感兴趣的功能模块，入手。本质就是梳理某个功能的CRUD流程\n4、去问问领导，公司内部是否有使用AI，如果有和允许，也是阅读的帮手\n12条程序员入职后快速掌握业务与技术的经验\n\n12条程序员入职后快速掌握业务与技术的经验\n\n\n工作产出方面\n\n日常总结与输出\n问题复盘与记录\n\n\n项目学习方面\n\n环境搭建与熟悉\n项目依赖梳理\n尝试实战练习\n主动代码质量分析-SonarQube进行静态代码质量分析\n\n\n业务熟悉方面\n\n全流程业务梳理\n积极沟通与融入\n主动了解与参与业务\n态度\n日常积极参与技术讨论\n\n\nMentor方面\n\n找能知道你的Mentor\n\n\n"},"tech/表结构设计规范":{"slug":"tech/表结构设计规范","filePath":"tech/表结构设计规范.md","title":"表结构设计规范","links":[],"tags":[],"content":"\nMySQL | 小傅哥 bugstack 虫洞栈\n\n设计规范\n\n1. 建表相关规范\n\n1.库名、表名、字段名，使用小写和下划线 _ 分割\n2.库名、表名、字段名，不超过12个字符。默认支持64个字符。\n3.库名、表名、字段名，见名知意，建议使用名词而不是动词。\n4.使用 InnoDB 存储引擎。支持；事务、锁、高并发 性能好。\n5.推荐使用 utf8mb4 可以存emoji\n6.单表字段数，建议不超过40个\n\n2. 字段相关规范\n\n1.整型定义中不显示设置长度，如使用 INT，而不是INT(4)\n2.存储精度浮点数，使用 DECIMAL 替代 FLOAT、DOUBLE\n3.所有字段，都要有 Comment 描述\n4.所有字段应定义为 NOT NULL\n5.超过2038年，用DATETIME存储\n6.短数据类型 0~80 选用 TINYINT 存储\n7.UUID 有全局唯一统一字段属性，适合做同步ES使用。\n8.IPV4，用无符号 INT 存储\n9.IPV6，用VARBINARY存储\n10.JSON MySql 8.x 新增特性\n11.update_time 设置 on update 更新属性\n\n3. 索引相关规范\n\n1.要求有自增ID作为主键，不要使用随机性较强的 order_id 作为主键，会导致innodb内部page分裂和大量随机I/O，性能下降。\n2.单表索引建议控制在5个以内，单索引字段数不超过5个。注意：已有idx(a, b)索引，又有idx(a)索引，可以把idx(a)删了，浪费空间，降低更新、写入性能。单个索引中，每个索引记录的长度不能超过64KB。\n3.利用覆盖索引来进行查询操作，避免回表。另外建组合索引的时候，区分度最高的在最左边。\n4.select(count(distinct(字段)))/count(id) = 1 的区分度，更适合建索引。在一些低区分度的字段，例如type、status上建立独立索引几乎没意义，降低更新、写入性能。\n5.防止因字段不同造成的隐式转换，导致索引失效。\n6.更新频繁的字段，不要建索引。\n\n4. 使用相关规范\n\n1.单表数据量不超过500万行，ibc 文件大小不超过 2G\n2.水平分表用取模，日志、报表类，可以用日期\n3.单实例表数目小于 500\n4.alter表之前，先判断表数据量，对于超过100W行记录的表进行alter table，必须在业务低峰期执行。因为alter table会产生表锁，期间阻塞对于该表的所有写入\n5.SELECT语句必须指定具体字段名称，禁止写成 “*”select * 会将不需要读的数据也从MySQL里读出来，造成网卡压力，数据表字段一旦更新，但model层没有来得及更新的话，系统会报错\n6.insert语句指定具体字段名称，不要写成 insert into t1 values(…)\n7.insert into…values(XX),(XX),(XX).. 这里XX的值不要超过5000个，值过多会引起主从同步延迟变大。\n8.union all 和 union，不要超过5个子句，如果没有去重的需求，使用union all性能更好。\n9.in 值列表限制在500以内，例如 select… where userid in(….500个以内…)，可以减少底层扫描，减轻数据库压力。\n10.除静态表或小表（100行以内），DML语句必须有where条件，且尽量使用索引查找\n11.生产环境禁止使用 hint，如 sql_no_cache，force index，ignore key，straight join等。 要相信MySQL优化器。hint是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的。\n12.where条件里，等号左右字段类型必须一致，否则会造成隐式的类型转化，可能导致无法使用索引\n13.生产数据库中强烈不推荐在大表执行全表扫描，查询数据量不要超过表行数的25%，否则可能导致无法使用索引\n14.where子句中禁止只使用全模糊的LIKE条件进行查找，如like ‘%abc%’，必须有其他等值或范围查询条件，否则可能导致无法使用索引\n15.索引列不要使用函数或表达式，如 where length(name)=10 或 where user_id+2=1002，否则可能导致无法使用索引\n16.减少使用or语句 or有可能被 mysq l优化为支持索引，但也要损耗 mysql 的 cpu 性能。可将or语句优化为union，然后在各个where条件上建立索引。如 where a=1 or b=2 优化为 where a=1… union …where b=2, key(a),key(b) 某些场景下，也可优化为 in\n17.分页查询，当limit起点较高时，可先用过滤条件进行过滤。如 select a,b,c from t1 limit 10000,20; 优化为 select a,b,c from t1 where id&gt;10000 limit 20;\n18.同表的字段增删、索引增删等，合并成一条DDL语句执行，提高执行效率，减少与数据库的交互。\n19.replace into 和 insert on duplicate key update 在并发环境下执行都可能产生死锁（后者在5.6版本可能不报错，但数据有可能产生问题），需要catch异常，做事务回滚，具体的锁冲突可以关注next key lock和insert intention lock\n20.TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。说明： TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。\n"},"tech/需求设计":{"slug":"tech/需求设计","filePath":"tech/需求设计.md","title":"需求设计","links":[],"tags":[],"content":"\n详细的产品PRD交互流程，比如说用户、前端页面、后端服务、微信公众号登录、支付宝支付。\n根据产品PRD提供的业务UI和流程，分析用户会有的行为，根据行为画出用户用例图。\n系统建模\n细节的流程设计，使用UML画执行流程图。最终代码也就是这个执行过程。\n\n"}}